[case await_non_awaitable]
class A:
    def __await__(self) -> int: ...
async def foo(a: A) -> None:
    await a  # E: Incompatible types in "await" (actual type "A", expected type "Awaitable[Any]")

[case await_invalid_generator_type]
class X:
    def __await__(self) -> tuple[int]: ...
async def foo() -> None:
    await X()  # E: Incompatible types in "await" (actual type "X", expected type "Awaitable[Any]")

[case async_context_should_be_correct]
import asyncio

def get_sum(number: int) -> int:
    return sum(_ for _ in range(number))

asyncio.gather(asyncio.to_thread(get_sum, 5))
